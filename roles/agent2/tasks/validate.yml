---
- name: Gather OS facts
  when:
    - ansible_distribution is not defined or
      ansible_distribution_major_version is not defined or
      ansible_distribution_release is not defined or
      ansible_distribution_version is not defined or
      ansible_os_family is not defined
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution
      - distribution_major_version
      - distribution_release
      - distribution_version
      - os_family

- name: Validate Zabbix major version is defined
  when:
    - ansible_os_family != 'Windows'
  ansible.builtin.assert:
    that:
      - zbxagent_major_version is defined
    fail_msg: "The 'zbxagent_major_version' variable is not defined."
    success_msg: "The 'zbxagent_major_version' variable is defined."

- name: Install Zabbix repository
  when:
    - ansible_os_family != 'Windows'
  ansible.builtin.include_role:
    name: trippsc2.zabbix.repo

- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ _file }}"
  vars:
    _file: "{{ lookup('first_found', _params) }}"
    _params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_release | default('') }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
        - fallback.yml
      paths:
        - "{{ role_path }}/vars"

- name: Validate OS is supported
  ansible.builtin.assert:
    that:
      - _zbxagent_os_is_supported
    fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported."
    success_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is from a supported OS family."

- name: Indicate OS is tested
  when:
    - _zbxagent_os_is_tested
  ansible.builtin.debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} has been tested with this role."

- name: Warn if OS is not tested
  when:
    - not _zbxagent_os_is_tested
  ansible.builtin.debug:
    msg: "WARNING: {{ ansible_distribution }} {{ ansible_distribution_version }} is not tested."
  changed_when: true

- name: Validate maximum log size
  when:
    - zbxagent_log_type == 'file'
  block:
    - name: Validate maximum log size is disabled when logrotate is configured
      when:
        - zbxagent_configure_logrotate
      ansible.builtin.assert:
        that:
          - zbxagent_log_file_size == 0
        fail_msg: "The 'zbxagent_log_file_size' variable must be 0 when logrotate is configured"
        success_msg: "The 'zbxagent_log_file_size' variable is 0 when logrotate is configured"

    - name: Validate maximum log size is defined when logrotate is not configured
      ansible.builtin.assert:
        that:
          - zbxagent_log_file_size >= 0
          - zbxagent_log_file_size <= 1024
        fail_msg: "The 'zbxagent_log_file_size' variable is not between 0 and 1024."
        success_msg: "The 'zbxagent_log_file_size' variable is between 0 and 1024."

- name: Validate listen port
  when:
    - zbxagent_listen_port is defined
  ansible.builtin.assert:
    that:
      - zbxagent_listen_port >= 1024
      - zbxagent_listen_port <= 32767
    fail_msg: "The 'zbxagent_listen_port' variable is not between 1024 and 32767."
    success_msg: "The 'zbxagent_listen_port' variable is between 1024 and 32767."

- name: Validate status port
  when:
    - zbxagent_status_port is defined
  ansible.builtin.assert:
    that:
      - zbxagent_status_port >= 1024
      - zbxagent_status_port <= 32767
    fail_msg: "The 'zbxagent_status_port' variable is not between 1024 and 32767."
    success_msg: "The 'zbxagent_status_port' variable is between 1024 and 32767."

- name: Validate refresh active checks
  when:
    - zbxagent_refresh_active_checks is defined
  ansible.builtin.assert:
    that:
      - zbxagent_refresh_active_checks >= 1
      - zbxagent_refresh_active_checks <= 86400
    fail_msg: "The 'zbxagent_refresh_active_checks' variable is not between 1 and 86400."
    success_msg: "The 'zbxagent_refresh_active_checks' variable is between 1 and 86400."

- name: Validate buffer send
  when:
    - zbxagent_buffer_send is defined
  ansible.builtin.assert:
    that:
      - zbxagent_buffer_send >= 1
      - zbxagent_buffer_send <= 3600
    fail_msg: "The 'zbxagent_buffer_send' variable is not between 1 and 3600."
    success_msg: "The 'zbxagent_buffer_send' variable is between 1 and 3600."

- name: Validate buffer size
  when:
    - zbxagent_buffer_size is defined
  ansible.builtin.assert:
    that:
      - zbxagent_buffer_size >= 2
      - zbxagent_buffer_size <= 65535
    fail_msg: "The 'zbxagent_buffer_size' variable is not between 2 and 65535."
    success_msg: "The 'zbxagent_buffer_size' variable is between 2 and 65535."

- name: Validate persistent buffer file is defined
  when:
    - zbxagent_enable_persistent_buffer
  ansible.builtin.assert:
    that:
      - zbxagent_persistent_buffer_file is defined
    fail_msg: "The 'zbxagent_persistent_buffer_file' variable is not defined"
    success_msg: "The 'zbxagent_persistent_buffer_file' variable is defined"

- name: Validate heartbeat frequency
  when:
    - zbxagent_heartbeat_frequency is defined
  ansible.builtin.assert:
    that:
      - zbxagent_heartbeat_frequency >= 0
      - zbxagent_heartbeat_frequency <= 3600
    fail_msg: "The 'zbxagent_heartbeat_frequency' variable is not between 0 and 3600."
    success_msg: "The 'zbxagent_heartbeat_frequency' variable is between 0 and 3600."

- name: Validate timeout
  ansible.builtin.assert:
    that:
      - zbxagent_timeout >= 1
      - zbxagent_timeout <= 30
    fail_msg: "The 'zbxagent_timeout' variable is not between 1 and 30."
    success_msg: "The 'zbxagent_timeout' variable is between 1 and 30."

- name: Validate plugin timeout
  when:
    - zbxagent_plugin_timeout is defined
  ansible.builtin.assert:
    that:
      - zbxagent_plugin_timeout >= 1
      - zbxagent_plugin_timeout <= 30
    fail_msg: "The 'zbxagent_plugin_timeout' variable is not between 1 and 30."
    success_msg: "The 'zbxagent_plugin_timeout' variable is between 1 and 30."

- name: Validate Ember+ configuration
  when:
    - ansible_os_family != 'Windows'
    - zbxagent_install_ember_plus_plugin
  block:
    - name: Validate Ember+ default URI
      when:
        - zbxagent_ember_plus_default_uri is defined
      ansible.builtin.assert:
        that:
          - zbxagent_ember_plus_default_uri is uri
        fail_msg: "The 'zbxagent_ember_plus_default_uri' variable is not a valid URI."
        success_msg: "The 'zbxagent_ember_plus_default_uri' variable is a valid URI."

    - name: Validate Ember+ keepalive
      when:
        - zbxagent_ember_plus_keepalive is defined
      ansible.builtin.assert:
        that:
          - zbxagent_ember_plus_keepalive >= 60
          - zbxagent_ember_plus_keepalive <= 900
        fail_msg: "The 'zbxagent_ember_plus_keepalive' variable is not between 60 and 900."
        success_msg: "The 'zbxagent_ember_plus_keepalive' variable is between 60 and 900."

    - name: Validate Ember+ session URI
      loop: "{{ zbxagent_ember_plus_sessions }}"
      ansible.builtin.assert:
        that:
          - item.uri is uri
        fail_msg: "The 'uri' variable in the 'zbxagent_ember_plus_sessions' is not a valid URI."
        success_msg: "The 'uri' variable in the 'zbxagent_ember_plus_sessions' is a valid URI."

    - name: Validate Ember+ timeout
      when:
        - zbxagent_ember_plus_timeout is defined
      ansible.builtin.assert:
        that:
          - zbxagent_ember_plus_timeout >= 1
          - zbxagent_ember_plus_timeout <= 30
        fail_msg: "The 'zbxagent_ember_plus_timeout' variable is not between 1 and 30."
        success_msg: "The 'zbxagent_ember_plus_timeout' variable is between 1 and 30."

- name: Validate MongoDB configuration
  when:
    - zbxagent_install_mongodb_plugin
  block:
    - name: Validate MongoDB default URI
      when:
        - zbxagent_mongodb_default_uri is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mongodb_default_uri is uri
        fail_msg: "The 'zbxagent_mongodb_default_uri' variable is not a valid URI."
        success_msg: "The 'zbxagent_mongodb_default_uri' variable is a valid URI."

    - name: Validate MongoDB keepalive
      when:
        - zbxagent_mongodb_keepalive is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mongodb_keepalive >= 60
          - zbxagent_mongodb_keepalive <= 900
        fail_msg: "The 'zbxagent_mongodb_keepalive' variable is not between 60 and 900."
        success_msg: "The 'zbxagent_mongodb_keepalive' variable is between 60 and 900."

    - name: Validate MongoDB session URI
      loop: "{{ zbxagent_mongodb_sessions }}"
      when:
        - item.uri is defined
      ansible.builtin.assert:
        that:
          - item.uri is uri
        fail_msg: "The 'uri' variable in the 'zbxagent_mongodb_sessions' is not a valid URI."
        success_msg: "The 'uri' variable in the 'zbxagent_mongodb_sessions' is a valid URI."

    - name: Check if MongoDB session TLS CA certificate is valid path
      loop: "{{ zbxagent_mongodb_sessions }}"
      when:
        - item.tls_ca_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_ca_file }}"
      register: _zbxagent_mongodb_tls_ca_file

    - name: Validate MongoDB session TLS CA certificate is valid path
      loop: "{{ _zbxagent_mongodb_tls_ca_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_ca_cert' variable in the 'zbxagent_mongodb_sessions' is not a valid path."
        success_msg: "The 'tls_ca_cert' variable in the 'zbxagent_mongodb_sessions' is a valid path."

    - name: Check if MongoDB session TLS certificate is valid path
      loop: "{{ zbxagent_mongodb_sessions }}"
      when:
        - item.tls_cert_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_cert_file }}"
      register: _zbxagent_mongodb_tls_cert_file

    - name: Validate MongoDB session TLS certificate is valid path
      loop: "{{ _zbxagent_mongodb_tls_cert_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_cert_file' variable in the 'zbxagent_mongodb_sessions' is not a valid path."
        success_msg: "The 'tls_cert_file' variable in the 'zbxagent_mongodb_sessions' is a valid path."

    - name: Check if MongoDB session TLS key is valid path
      loop: "{{ zbxagent_mongodb_sessions }}"
      when:
        - item.tls_key_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_key_file }}"
      register: _zbxagent_mongodb_tls_key_file

    - name: Validate MongoDB session TLS key is valid path
      loop: "{{ _zbxagent_mongodb_tls_key_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_key_file' variable in the 'zbxagent_mongodb_sessions' is not a valid path."
        success_msg: "The 'tls_key_file' variable in the 'zbxagent_mongodb_sessions' is a valid path."

    - name: Validate MongoDB timeout
      when:
        - zbxagent_mongodb_timeout is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mongodb_timeout >= 1
          - zbxagent_mongodb_timeout <= 30
        fail_msg: "The 'zbxagent_mongodb_timeout' variable is not between 1 and 30."
        success_msg: "The 'zbxagent_mongodb_timeout' variable is between 1 and 30."

- name: Validate MSSQL configuration
  when:
    - zbxagent_install_mssql_plugin
  block:
    - name: Check if MSSQL custom queries directory is valid path
      when:
        - zbxagent_mssql_custom_queries_dir is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_mssql_custom_queries_dir }}"
      register: _zbxagent_mssql_custom_queries_dir

    - name: Validate MSSQL custom queries directory is valid path
      when:
        - zbxagent_mssql_custom_queries_dir is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_mssql_custom_queries_dir.stat.isdir
        fail_msg: "The 'zbxagent_mssql_custom_queries_dir' variable is not a valid path."
        success_msg: "The 'zbxagent_mssql_custom_queries_dir' variable is a valid path."

    - name: Check if MSSQL CA certificate path is valid path
      when:
        - zbxagent_mssql_default_ca_cert_path is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_mssql_default_ca_cert_path }}"
      register: _zbxagent_mssql_default_ca_cert_path

    - name: Validate MSSQL CA certificate path is valid path
      when:
        - zbxagent_mssql_default_ca_cert_path is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_mssql_default_ca_cert_path.stat.isreg or
            _zbxagent_mssql_default_ca_cert_path.stat.islnk
        fail_msg: "The 'zbxagent_mssql_default_ca_cert_path' variable is not a valid path."
        success_msg: "The 'zbxagent_mssql_default_ca_cert_path' variable is a valid path."

    - name: Validate MSSQL default URI
      when:
        - zbxagent_mssql_default_uri is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mssql_default_uri is uri
        fail_msg: "The 'zbxagent_mssql_default_uri' variable is not a valid URI."
        success_msg: "The 'zbxagent_mssql_default_uri' variable is a valid URI."

    - name: Validate MSSQL keepalive
      when:
        - zbxagent_mssql_keepalive is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mssql_keepalive >= 60
          - zbxagent_mssql_keepalive <= 900
        fail_msg: "The 'zbxagent_mssql_keepalive' variable is not between 60 and 900."
        success_msg: "The 'zbxagent_mssql_keepalive' variable is between 60 and 900."

    - name: Check if MSSQL session CA certificate path is valid path
      loop: "{{ zbxagent_mssql_sessions }}"
      when:
        - item.ca_cert_path is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.ca_cert_path }}"
      register: _zbxagent_mssql_ca_cert_path

    - name: Validate MSSQL session CA certificate path is valid path
      loop: "{{ _zbxagent_mssql_ca_cert_path.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'ca_cert_path' variable in the 'zbxagent_mssql_sessions' is not a valid path."
        success_msg: "The 'ca_cert_path' variable in the 'zbxagent_mssql_sessions' is a valid path."

    - name: Validate MSSQL session URI
      loop: "{{ zbxagent_mssql_sessions }}"
      when:
        - item.uri is defined
      become: true
      ansible.builtin.assert:
        that:
          - item.uri is uri
        fail_msg: "The 'uri' variable in the 'zbxagent_mssql_sessions' is not a valid URI."
        success_msg: "The 'uri' variable in the 'zbxagent_mssql_sessions' is a valid URI."

    - name: Validate MSSQL timeout
      when:
        - zbxagent_mssql_timeout is defined
      ansible.builtin.assert:
        that:
          - zbxagent_mssql_timeout >= 1
          - zbxagent_mssql_timeout <= 30
        fail_msg: "The 'zbxagent_mssql_timeout' variable is not between 1 and 30."
        success_msg: "The 'zbxagent_mssql_timeout' variable is between 1 and 30."

- name: Validate PostgreSQL configuration
  when:
    - zbxagent_install_pgsql_plugin
  block:
    - name: Validate PostgreSQL call timeout
      when:
        - zbxagent_pgsql_call_timeout is defined
      ansible.builtin.assert:
        that:
          - zbxagent_pgsql_call_timeout >= 1
          - zbxagent_pgsql_call_timeout <= 30
        fail_msg: "The 'zbxagent_pgsql_call_timeout' variable is not between 1 and 30."
        success_msg: "The 'zbxagent_pgsql_call_timeout' variable is between 1 and 30."

    - name: Check if PostgreSQL custom queries directory is valid path
      when:
        - zbxagent_pgsql_custom_queries_dir is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_pgsql_custom_queries_dir }}"
      register: _zbxagent_pgsql_custom_queries_dir

    - name: Validate PostgreSQL custom queries directory is valid path
      when:
        - zbxagent_pgsql_custom_queries_dir is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_pgsql_custom_queries_dir.stat.isdir
        fail_msg: "The 'zbxagent_pgsql_custom_queries_dir' variable is not a valid path."
        success_msg: "The 'zbxagent_pgsql_custom_queries_dir' variable is a valid path."

    - name: Check if PostgreSQL default CA certificate is valid path
      when:
        - zbxagent_pgsql_default_tls_ca_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_pgsql_default_tls_ca_file }}"
      register: _zbxagent_pgsql_default_tls_ca_file

    - name: Validate PostgreSQL default CA certificate is valid path
      when:
        - zbxagent_pgsql_default_tls_ca_file is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_pgsql_default_tls_ca_file.stat.isreg or
            _zbxagent_pgsql_default_tls_ca_file.stat.islnk
        fail_msg: "The 'zbxagent_pgsql_default_tls_ca_file' variable is not a valid path."
        success_msg: "The 'zbxagent_pgsql_default_tls_ca_file' variable is a valid path."

    - name: Check if PostgreSQL default certificate is valid path
      when:
        - zbxagent_pgsql_default_tls_cert_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_pgsql_default_tls_cert_file }}"
      register: _zbxagent_pgsql_default_tls_cert_file

    - name: Validate PostgreSQL default certificate is valid path
      when:
        - zbxagent_pgsql_default_tls_cert_file is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_pgsql_default_tls_cert_file.stat.isreg or
            _zbxagent_pgsql_default_tls_cert_file.stat.islnk
        fail_msg: "The 'zbxagent_pgsql_default_tls_cert_file' variable is not a valid path."
        success_msg: "The 'zbxagent_pgsql_default_tls_cert_file' variable is a valid path."

    - name: Check if PostgreSQL default private key is valid path
      when:
        - zbxagent_pgsql_default_tls_key_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ zbxagent_pgsql_default_tls_key_file }}"
      register: _zbxagent_pgsql_default_tls_key_file

    - name: Validate PostgreSQL default private key is valid path
      when:
        - zbxagent_pgsql_default_tls_key_file is defined
      ansible.builtin.assert:
        that:
          - _zbxagent_pgsql_default_tls_key_file.stat.isreg or
            _zbxagent_pgsql_default_tls_key_file.stat.islnk
        fail_msg: "The 'zbxagent_pgsql_default_tls_key_file' variable is not a valid path."
        success_msg: "The 'zbxagent_pgsql_default_tls_key_file' variable is a valid path."

    - name: Validate PostgreSQL default URI
      when:
        - zbxagent_pgsql_default_uri is defined
      ansible.builtin.assert:
        that:
          - zbxagent_pgsql_default_uri is uri
        fail_msg: "The 'zbxagent_pgsql_default_uri' variable is not a valid URI."
        success_msg: "The 'zbxagent_pgsql_default_uri' variable is a valid URI."

    - name: Validate PostgreSQL keepalive
      when:
        - zbxagent_pgsql_keepalive is defined
      ansible.builtin.assert:
        that:
          - zbxagent_pgsql_keepalive >= 60
          - zbxagent_pgsql_keepalive <= 900
        fail_msg: "The 'zbxagent_pgsql_keepalive' variable is not between 60 and 900."
        success_msg: "The 'zbxagent_pgsql_keepalive' variable is between 60 and 900."

    - name: Check if PostgreSQL session CA certificate is valid path
      loop: "{{ zbxagent_pgsql_sessions }}"
      when:
        - item.tls_ca_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_ca_file }}"
      register: _zbxagent_pgsql_tls_ca_file

    - name: Validate PostgreSQL session CA certificate is valid path
      loop: "{{ _zbxagent_pgsql_tls_ca_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_ca_file' variable in the 'zbxagent_pgsql_sessions' is not a valid path."
        success_msg: "The 'tls_ca_file' variable in the 'zbxagent_pgsql_sessions' is a valid path."

    - name: Check if PostgreSQL session certificate is valid path
      loop: "{{ zbxagent_pgsql_sessions }}"
      when:
        - item.tls_cert_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_cert_file }}"
      register: _zbxagent_pgsql_tls_cert_file

    - name: Validate PostgreSQL session certificate is valid path
      loop: "{{ _zbxagent_pgsql_tls_cert_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_cert_file' variable in the 'zbxagent_pgsql_sessions' is not a valid path."
        success_msg: "The 'tls_cert_file' variable in the 'zbxagent_pgsql_sessions' is a valid path."

    - name: Check if PostgreSQL session private key is valid path
      loop: "{{ zbxagent_pgsql_sessions }}"
      when:
        - item.tls_key_file is defined
      become: true
      ansible.builtin.stat:
        path: "{{ item.tls_key_file }}"
      register: _zbxagent_pgsql_tls_key_file

    - name: Validate PostgreSQL session private key is valid path
      loop: "{{ _zbxagent_pgsql_tls_key_file.results }}"
      ansible.builtin.assert:
        that:
          - item.stat.isreg or item.stat.islnk
        fail_msg: "The 'tls_key_file' variable in the 'zbxagent_pgsql_sessions' is not a valid path."
        success_msg: "The 'tls_key_file' variable in the 'zbxagent_pgsql_sessions' is a valid path."

    - name: Validate PostgreSQL session URI
      loop: "{{ zbxagent_pgsql_sessions }}"
      when:
        - item.uri is defined
      ansible.builtin.assert:
        that:
          - item.uri is uri
        fail_msg: "The 'uri' variable in the 'zbxagent_pgsql_sessions' is not a valid URI."
        success_msg: "The 'uri' variable in the 'zbxagent_pgsql_sessions' is a valid URI."

    - name: Validate PostgreSQL timeout
      when:
        - zbxagent_pgsql_timeout is defined
      ansible.builtin.assert:
        that:
          - zbxagent_pgsql_timeout >= 1
          - zbxagent_pgsql_timeout <= 30
        fail_msg: "The 'zbxagent_pgsql_timeout' variable is not between 1 and 30."
        success_msg: "The 'zbxagent_pgsql_timeout' variable is between 1 and 30."

- name: Validate maximum log lines per second
  ansible.builtin.assert:
    that:
      - zbxagent_log_max_lines_per_second >= 1
      - zbxagent_log_max_lines_per_second <= 1000
    fail_msg: "The 'zbxagent_log_max_lines_per_second' variable is not between 1 and 1000."
    success_msg: "The 'zbxagent_log_max_lines_per_second' variable is between 1 and 1000."

- name: Validate logrotate retention
  when:
    - zbxagent_configure_logrotate
  ansible.builtin.assert:
    that:
      - zbxagent_logrotate_retention >= 1
    fail_msg: "The 'zbxagent_logrotate_retention' variable is not greater than 0."
    success_msg: "The 'zbxagent_logrotate_retention' variable is greater than 0."
